name: Release

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

on: 
  push:
    branches:
      - "main"

jobs:
  macos-amd64:
    name: "üçé deno_v8_snapshot_macos_amd64"
    runs-on: macos-13
    steps:
      - uses: actions/checkout@v4
        with: { submodules: true }
      - run: |
          set -e

          brew install llvm lld cmake protobuf make gcc
          export PATH="/opt/homebrew/opt/llvm/bin:$PATH"

          source .github/utils/install-rust.bash
          source .github/utils/install-protobuf.bash \
            https://github.com/protocolbuffers/protobuf/releases/download/v25.3/protoc-25.3-osx-x86_64.zip

          rustup target add x86_64-apple-darwin

          cd deno && cargo build --release --target x86_64-apple-darwin
      - run: |
          cargo build --release --target x86_64-apple-darwin
          cargo publish --package deno_v8_snapshot_macos_arm64 --token $CRATES_IO_API_TOKEN --target x86_64-apple-darwin
        env:
          CRATES_IO_API_TOKEN: ${{ secrets.CRATES_IO_API_TOKEN }}

  macos-arm64:
    name: "üçé deno_v8_snapshot_macos_arm64"
    runs-on: macos-15
    steps:
      - uses: actions/checkout@v4
        with: { submodules: true }
      - run: |
          set -e

          brew install llvm lld cmake protobuf make gcc
          export PATH="/opt/homebrew/opt/llvm/bin:$PATH"

          source .github/utils/install-rust.bash
          source .github/utils/install-protobuf.bash \
            https://github.com/protocolbuffers/protobuf/releases/download/v25.3/protoc-25.3-osx-aarch_64.zip

          rustup target add aarch64-apple-darwin

          cd deno && cargo build --release --target aarch64-apple-darwin
      - run: |
          cargo build --release --target aarch64-apple-darwin
          cargo publish --package deno_v8_snapshot_macos_arm64 --token $CRATES_IO_API_TOKEN --target aarch64-apple-darwin
        env:
          CRATES_IO_API_TOKEN: ${{ secrets.CRATES_IO_API_TOKEN }}

  linux-arm64:
    name: "üê• deno_v8_snapshot_linux_arm64"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with: { submodules: true }
      - run: |
          set -e
          echo Linux ARM not yet supported because I dont know how to cross compile Deno

  linux-amd64:
    name: "üê• deno_v8_snapshot_linux_amd64"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with: { submodules: true }
      - run: |
          set -e
          wget https://apt.llvm.org/llvm.sh
          chmod +x llvm.sh
          sudo ./llvm.sh 17

          sudo apt-get update -y
          sudo apt-get install -y --install-recommends -y cmake libglib2.0-dev

          source .github/utils/install-rust.bash
          source .github/utils/install-protobuf.bash \
            https://github.com/protocolbuffers/protobuf/releases/download/v25.3/protoc-25.3-linux-x86_64.zip
        
          rustup target add x86_64-unknown-linux-gnu

          cd deno && cargo build --release --target x86_64-unknown-linux-gnu
      - run: |
          cargo build --release --target x86_64-unknown-linux-gnu
          cargo publish --package deno_v8_snapshot_linux_amd64 --token $CRATES_IO_API_TOKEN --target x86_64-unknown-linux-gnu
        env:
          CRATES_IO_API_TOKEN: ${{ secrets.CRATES_IO_API_TOKEN }}

  windows-amd64:
    name: "üü¶ deno_v8_snapshot_windows_amd64"
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
        with: { submodules: true }
      - shell: pwsh
        run: |
          echo "Installing Protobuf"
          $PROTOC_URL = "https://github.com/protocolbuffers/protobuf/releases/download/v25.3/protoc-25.3-win64.zip"
          $PROTOC_DIR = "$HOME\local\protoc"
          New-Item -Path "$PROTOC_DIR" -ItemType Directory  -Force
          curl -L -o "$PROTOC_DIR\protoc.zip" $PROTOC_URL
          unzip "$PROTOC_DIR\protoc.zip" -d $PROTOC_DIR
          $env:Path += ";$PROTOC_DIR\bin"
          protoc --version

          rustup target add x86_64-pc-windows-msvc
        
          cd deno && cargo build --release --target x86_64-pc-windows-msvc
      - shell: pwsh
        run: |
          cargo build --release --target x86_64-pc-windows-msvc
          cargo publish --package deno_v8_snapshot_windows_amd64 --token $CRATES_IO_API_TOKEN --target x86_64-pc-windows-msvc
        env:
          CRATES_IO_API_TOKEN: ${{ secrets.CRATES_IO_API_TOKEN }}

  windows-arm64:
    name: "üü¶ deno_v8_snapshot_windows_arm64"
    runs-on: windows-latest
    steps:
      - shell: pwsh
        run: |
          echo "Deno does not compile on ARM Windows"

  publish-deno-v8-snapshot:
    name: "üîÑ deno_v8_snapshot"
    runs-on: ubuntu-latest
    needs: [macos-arm64, macos-amd64, linux-arm64, linux-amd64, windows-amd64, windows-arm64]
    steps:
      - uses: actions/checkout@v4
      - env:
          CRATES_IO_API_TOKEN: ${{ secrets.CRATES_IO_API_TOKEN }}
        run: |
          cargo publish --package deno_v8_snapshot --token $CRATES_IO_API_TOKEN
